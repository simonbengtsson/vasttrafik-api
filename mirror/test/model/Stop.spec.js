/**
 * Reseplaneraren
 * Provides access to VÃ¤sttrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Reseplaneraren);
  }
}(this, function(expect, Reseplaneraren) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Reseplaneraren.Stop();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Stop', function() {
    it('should create an instance of Stop', function() {
      // uncomment below and update the code to test Stop
      //var instane = new Reseplaneraren.Stop();
      //expect(instance).to.be.a(Reseplaneraren.Stop);
    });

    it('should have the property routeIdx (base name: "routeIdx")', function() {
      // uncomment below and update the code to test the property routeIdx
      //var instane = new Reseplaneraren.Stop();
      //expect(instance).to.be();
    });

    it('should have the property arrDate (base name: "arrDate")', function() {
      // uncomment below and update the code to test the property arrDate
      //var instane = new Reseplaneraren.Stop();
      //expect(instance).to.be();
    });

    it('should have the property depTime (base name: "depTime")', function() {
      // uncomment below and update the code to test the property depTime
      //var instane = new Reseplaneraren.Stop();
      //expect(instance).to.be();
    });

    it('should have the property lon (base name: "lon")', function() {
      // uncomment below and update the code to test the property lon
      //var instane = new Reseplaneraren.Stop();
      //expect(instance).to.be();
    });

    it('should have the property depDate (base name: "depDate")', function() {
      // uncomment below and update the code to test the property depDate
      //var instane = new Reseplaneraren.Stop();
      //expect(instance).to.be();
    });

    it('should have the property track (base name: "track")', function() {
      // uncomment below and update the code to test the property track
      //var instane = new Reseplaneraren.Stop();
      //expect(instance).to.be();
    });

    it('should have the property rtTrack (base name: "rtTrack")', function() {
      // uncomment below and update the code to test the property rtTrack
      //var instane = new Reseplaneraren.Stop();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new Reseplaneraren.Stop();
      //expect(instance).to.be();
    });

    it('should have the property rtDepTime (base name: "rtDepTime")', function() {
      // uncomment below and update the code to test the property rtDepTime
      //var instane = new Reseplaneraren.Stop();
      //expect(instance).to.be();
    });

    it('should have the property rtArrTime (base name: "rtArrTime")', function() {
      // uncomment below and update the code to test the property rtArrTime
      //var instane = new Reseplaneraren.Stop();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new Reseplaneraren.Stop();
      //expect(instance).to.be();
    });

    it('should have the property arrTime (base name: "arrTime")', function() {
      // uncomment below and update the code to test the property arrTime
      //var instane = new Reseplaneraren.Stop();
      //expect(instance).to.be();
    });

    it('should have the property lat (base name: "lat")', function() {
      // uncomment below and update the code to test the property lat
      //var instane = new Reseplaneraren.Stop();
      //expect(instance).to.be();
    });

    it('should have the property rtDepDate (base name: "rtDepDate")', function() {
      // uncomment below and update the code to test the property rtDepDate
      //var instane = new Reseplaneraren.Stop();
      //expect(instance).to.be();
    });

    it('should have the property rtArrDate (base name: "rtArrDate")', function() {
      // uncomment below and update the code to test the property rtArrDate
      //var instane = new Reseplaneraren.Stop();
      //expect(instance).to.be();
    });

  });

}));
