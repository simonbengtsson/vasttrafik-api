/*
 * Reseplaneraren
 * Provides access to VÃ¤sttrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Reseplaneraren);
  }
}(this, function(expect, Reseplaneraren) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Stop', function() {
      beforeEach(function() {
        instance = new Reseplaneraren.Stop();
      });

      it('should create an instance of Stop', function() {
        // TODO: update the code to test Stop
        expect(instance).to.be.a(Reseplaneraren.Stop);
      });

      it('should have the property routeIdx (base name: "routeIdx")', function() {
        // TODO: update the code to test the property routeIdx
        expect(instance).to.have.property('routeIdx');
        // expect(instance.routeIdx).to.be(expectedValueLiteral);
      });

      it('should have the property arrDate (base name: "arrDate")', function() {
        // TODO: update the code to test the property arrDate
        expect(instance).to.have.property('arrDate');
        // expect(instance.arrDate).to.be(expectedValueLiteral);
      });

      it('should have the property depTime (base name: "depTime")', function() {
        // TODO: update the code to test the property depTime
        expect(instance).to.have.property('depTime');
        // expect(instance.depTime).to.be(expectedValueLiteral);
      });

      it('should have the property lon (base name: "lon")', function() {
        // TODO: update the code to test the property lon
        expect(instance).to.have.property('lon');
        // expect(instance.lon).to.be(expectedValueLiteral);
      });

      it('should have the property depDate (base name: "depDate")', function() {
        // TODO: update the code to test the property depDate
        expect(instance).to.have.property('depDate');
        // expect(instance.depDate).to.be(expectedValueLiteral);
      });

      it('should have the property track (base name: "track")', function() {
        // TODO: update the code to test the property track
        expect(instance).to.have.property('track');
        // expect(instance.track).to.be(expectedValueLiteral);
      });

      it('should have the property rtTrack (base name: "rtTrack")', function() {
        // TODO: update the code to test the property rtTrack
        expect(instance).to.have.property('rtTrack');
        // expect(instance.rtTrack).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property rtDepTime (base name: "rtDepTime")', function() {
        // TODO: update the code to test the property rtDepTime
        expect(instance).to.have.property('rtDepTime');
        // expect(instance.rtDepTime).to.be(expectedValueLiteral);
      });

      it('should have the property rtArrTime (base name: "rtArrTime")', function() {
        // TODO: update the code to test the property rtArrTime
        expect(instance).to.have.property('rtArrTime');
        // expect(instance.rtArrTime).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property arrTime (base name: "arrTime")', function() {
        // TODO: update the code to test the property arrTime
        expect(instance).to.have.property('arrTime');
        // expect(instance.arrTime).to.be(expectedValueLiteral);
      });

      it('should have the property lat (base name: "lat")', function() {
        // TODO: update the code to test the property lat
        expect(instance).to.have.property('lat');
        // expect(instance.lat).to.be(expectedValueLiteral);
      });

      it('should have the property rtDepDate (base name: "rtDepDate")', function() {
        // TODO: update the code to test the property rtDepDate
        expect(instance).to.have.property('rtDepDate');
        // expect(instance.rtDepDate).to.be(expectedValueLiteral);
      });

      it('should have the property rtArrDate (base name: "rtArrDate")', function() {
        // TODO: update the code to test the property rtArrDate
        expect(instance).to.have.property('rtArrDate');
        // expect(instance.rtArrDate).to.be(expectedValueLiteral);
      });

    });
  });

}));
