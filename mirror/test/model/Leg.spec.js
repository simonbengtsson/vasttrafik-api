/*
 * Reseplaneraren
 * Provides access to VÃ¤sttrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Reseplaneraren);
  }
}(this, function(expect, Reseplaneraren) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Leg', function() {
      beforeEach(function() {
        instance = new Reseplaneraren.Leg();
      });

      it('should create an instance of Leg', function() {
        // TODO: update the code to test Leg
        expect(instance).to.be.a(Reseplaneraren.Leg);
      });

      it('should have the property fgColor (base name: "fgColor")', function() {
        // TODO: update the code to test the property fgColor
        expect(instance).to.have.property('fgColor');
        // expect(instance.fgColor).to.be(expectedValueLiteral);
      });

      it('should have the property booking (base name: "booking")', function() {
        // TODO: update the code to test the property booking
        expect(instance).to.have.property('booking');
        // expect(instance.booking).to.be(expectedValueLiteral);
      });

      it('should have the property direction (base name: "direction")', function() {
        // TODO: update the code to test the property direction
        expect(instance).to.have.property('direction');
        // expect(instance.direction).to.be(expectedValueLiteral);
      });

      it('should have the property journeyDetailRef (base name: "JourneyDetailRef")', function() {
        // TODO: update the code to test the property journeyDetailRef
        expect(instance).to.have.property('journeyDetailRef');
        // expect(instance.journeyDetailRef).to.be(expectedValueLiteral);
      });

      it('should have the property cancelled (base name: "cancelled")', function() {
        // TODO: update the code to test the property cancelled
        expect(instance).to.have.property('cancelled');
        // expect(instance.cancelled).to.be(expectedValueLiteral);
      });

      it('should have the property kcal (base name: "kcal")', function() {
        // TODO: update the code to test the property kcal
        expect(instance).to.have.property('kcal');
        // expect(instance.kcal).to.be(expectedValueLiteral);
      });

      it('should have the property origin (base name: "Origin")', function() {
        // TODO: update the code to test the property origin
        expect(instance).to.have.property('origin');
        // expect(instance.origin).to.be(expectedValueLiteral);
      });

      it('should have the property sname (base name: "sname")', function() {
        // TODO: update the code to test the property sname
        expect(instance).to.have.property('sname');
        // expect(instance.sname).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property geometryRef (base name: "GeometryRef")', function() {
        // TODO: update the code to test the property geometryRef
        expect(instance).to.have.property('geometryRef');
        // expect(instance.geometryRef).to.be(expectedValueLiteral);
      });

      it('should have the property bgColor (base name: "bgColor")', function() {
        // TODO: update the code to test the property bgColor
        expect(instance).to.have.property('bgColor');
        // expect(instance.bgColor).to.be(expectedValueLiteral);
      });

      it('should have the property notes (base name: "Notes")', function() {
        // TODO: update the code to test the property notes
        expect(instance).to.have.property('notes');
        // expect(instance.notes).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property stroke (base name: "stroke")', function() {
        // TODO: update the code to test the property stroke
        expect(instance).to.have.property('stroke');
        // expect(instance.stroke).to.be(expectedValueLiteral);
      });

      it('should have the property reachable (base name: "reachable")', function() {
        // TODO: update the code to test the property reachable
        expect(instance).to.have.property('reachable');
        // expect(instance.reachable).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property night (base name: "night")', function() {
        // TODO: update the code to test the property night
        expect(instance).to.have.property('night');
        // expect(instance.night).to.be(expectedValueLiteral);
      });

      it('should have the property destination (base name: "Destination")', function() {
        // TODO: update the code to test the property destination
        expect(instance).to.have.property('destination');
        // expect(instance.destination).to.be(expectedValueLiteral);
      });

      it('should have the property percentBikeRoad (base name: "percentBikeRoad")', function() {
        // TODO: update the code to test the property percentBikeRoad
        expect(instance).to.have.property('percentBikeRoad');
        // expect(instance.percentBikeRoad).to.be(expectedValueLiteral);
      });

      it('should have the property accessibility (base name: "accessibility")', function() {
        // TODO: update the code to test the property accessibility
        expect(instance).to.have.property('accessibility');
        // expect(instance.accessibility).to.be(expectedValueLiteral);
      });

    });
  });

}));
