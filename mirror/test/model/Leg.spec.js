/**
 * Reseplaneraren
 * Provides access to VÃ¤sttrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Reseplaneraren);
  }
}(this, function(expect, Reseplaneraren) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Reseplaneraren.Leg();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Leg', function() {
    it('should create an instance of Leg', function() {
      // uncomment below and update the code to test Leg
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be.a(Reseplaneraren.Leg);
    });

    it('should have the property fgColor (base name: "fgColor")', function() {
      // uncomment below and update the code to test the property fgColor
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be();
    });

    it('should have the property booking (base name: "booking")', function() {
      // uncomment below and update the code to test the property booking
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be();
    });

    it('should have the property direction (base name: "direction")', function() {
      // uncomment below and update the code to test the property direction
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be();
    });

    it('should have the property journeyDetailRef (base name: "JourneyDetailRef")', function() {
      // uncomment below and update the code to test the property journeyDetailRef
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be();
    });

    it('should have the property cancelled (base name: "cancelled")', function() {
      // uncomment below and update the code to test the property cancelled
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be();
    });

    it('should have the property kcal (base name: "kcal")', function() {
      // uncomment below and update the code to test the property kcal
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be();
    });

    it('should have the property origin (base name: "Origin")', function() {
      // uncomment below and update the code to test the property origin
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be();
    });

    it('should have the property sname (base name: "sname")', function() {
      // uncomment below and update the code to test the property sname
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be();
    });

    it('should have the property geometryRef (base name: "GeometryRef")', function() {
      // uncomment below and update the code to test the property geometryRef
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be();
    });

    it('should have the property bgColor (base name: "bgColor")', function() {
      // uncomment below and update the code to test the property bgColor
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be();
    });

    it('should have the property notes (base name: "Notes")', function() {
      // uncomment below and update the code to test the property notes
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be();
    });

    it('should have the property stroke (base name: "stroke")', function() {
      // uncomment below and update the code to test the property stroke
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be();
    });

    it('should have the property reachable (base name: "reachable")', function() {
      // uncomment below and update the code to test the property reachable
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be();
    });

    it('should have the property night (base name: "night")', function() {
      // uncomment below and update the code to test the property night
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be();
    });

    it('should have the property destination (base name: "Destination")', function() {
      // uncomment below and update the code to test the property destination
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be();
    });

    it('should have the property percentBikeRoad (base name: "percentBikeRoad")', function() {
      // uncomment below and update the code to test the property percentBikeRoad
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be();
    });

    it('should have the property accessibility (base name: "accessibility")', function() {
      // uncomment below and update the code to test the property accessibility
      //var instane = new Reseplaneraren.Leg();
      //expect(instance).to.be();
    });

  });

}));
