/*
 * Reseplaneraren
 * Provides access to VÃ¤sttrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Reseplaneraren);
  }
}(this, function(expect, Reseplaneraren) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Reseplaneraren.LivemapApi();
  });

  describe('(package)', function() {
    describe('LivemapApi', function() {
      describe('livemap', function() {
        it('should call livemap successfully', function(done) {
          // TODO: uncomment, update parameter values for livemap call and complete the assertions
          /*
          var minx = "minx_example";
          var maxx = "maxx_example";
          var miny = "miny_example";
          var maxy = "maxy_example";
          var onlyRealtime = "onlyRealtime_example";

          instance.livemap(minx, maxx, miny, maxy, onlyRealtime, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Reseplaneraren.LiveMap);
            expect(data.time).to.be.a(Date);
            expect(data.time).to.be(new Date());
            expect(data.maxx).to.be.a('number');
            expect(data.maxx).to.be(0.0);
            expect(data.maxy).to.be.a('number');
            expect(data.maxy).to.be(0.0);
            {
              let dataCtr = data.vehicles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Reseplaneraren.Vehicle);
                expect(data.lcolor).to.be.a('string');
                expect(data.lcolor).to.be("");
                expect(data.prodClass).to.be.a('string');
                expect(data.prodClass).to.be("VAS");
                expect(data.bcolor).to.be.a('string');
                expect(data.bcolor).to.be("");
                expect(data.direction).to.be.a('number');
                expect(data.direction).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.gid).to.be.a('string');
                expect(data.gid).to.be("");
                expect(data.delay).to.be.a('number');
                expect(data.delay).to.be(0);
                expect(data.y).to.be.a('number');
                expect(data.y).to.be(0.0);
                expect(data.x).to.be.a('number');
                expect(data.x).to.be(0.0);
              }
            }
            expect(data.minx).to.be.a('number');
            expect(data.minx).to.be(0.0);
            expect(data.miny).to.be.a('number');
            expect(data.miny).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
