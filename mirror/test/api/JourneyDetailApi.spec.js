/*
 * Reseplaneraren
 * Provides access to VÃ¤sttrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Reseplaneraren);
  }
}(this, function(expect, Reseplaneraren) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Reseplaneraren.JourneyDetailApi();
  });

  describe('(package)', function() {
    describe('JourneyDetailApi', function() {
      describe('getJourneyDetail', function() {
        it('should call getJourneyDetail successfully', function(done) {
          // TODO: uncomment, update parameter values for getJourneyDetail call and complete the assertions
          /*
          var ref = "ref_example";

          instance.getJourneyDetail(ref, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Reseplaneraren.JourneyDetail);
            expect(data.journeyType).to.be.a(Reseplaneraren.JourneyType);
                  expect(data.journeyType.routeIdxTo).to.be.a('number');
              expect(data.journeyType.routeIdxTo).to.be(0);
              expect(data.journeyType.routeIdxFrom).to.be.a('number');
              expect(data.journeyType.routeIdxFrom).to.be(0);
              expect(data.journeyType.type).to.be.a('string');
              expect(data.journeyType.type).to.be("");
            expect(data.errorText).to.be.a('string');
            expect(data.errorText).to.be("");
            expect(data.error).to.be.a('string');
            expect(data.error).to.be("");
            expect(data.serverdate).to.be.a(Date);
            expect(data.serverdate).to.be(new Date());
            expect(data.servertime).to.be.a('string');
            expect(data.servertime).to.be("");
            expect(data.journeyId).to.be.a(Reseplaneraren.JourneyId);
                  expect(data.journeyId.id).to.be.a('string');
              expect(data.journeyId.id).to.be("");
              expect(data.journeyId.routeIdxTo).to.be.a('number');
              expect(data.journeyId.routeIdxTo).to.be(0);
              expect(data.journeyId.routeIdxFrom).to.be.a('number');
              expect(data.journeyId.routeIdxFrom).to.be(0);
            expect(data.direction).to.be.a(Reseplaneraren.Direction);
                  expect(data.direction.routeIdxTo).to.be.a('number');
              expect(data.direction.routeIdxTo).to.be(0);
              expect(data.direction.value).to.be.a('string');
              expect(data.direction.value).to.be("");
              expect(data.direction.routeIdxFrom).to.be.a('number');
              expect(data.direction.routeIdxFrom).to.be(0);
            {
              let dataCtr = data.stop;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Reseplaneraren.Stop);
                expect(data.routeIdx).to.be.a('string');
                expect(data.routeIdx).to.be("");
                expect(data.arrDate).to.be.a(Date);
                expect(data.arrDate).to.be(new Date());
                expect(data.depTime).to.be.a('string');
                expect(data.depTime).to.be("");
                expect(data.lon).to.be.a('string');
                expect(data.lon).to.be("");
                expect(data.depDate).to.be.a(Date);
                expect(data.depDate).to.be(new Date());
                expect(data.track).to.be.a('string');
                expect(data.track).to.be("");
                expect(data.rtTrack).to.be.a('string');
                expect(data.rtTrack).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.rtDepTime).to.be.a('string');
                expect(data.rtDepTime).to.be("");
                expect(data.rtArrTime).to.be.a('string');
                expect(data.rtArrTime).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.arrTime).to.be.a('string');
                expect(data.arrTime).to.be("");
                expect(data.lat).to.be.a('string');
                expect(data.lat).to.be("");
                expect(data.rtDepDate).to.be.a(Date);
                expect(data.rtDepDate).to.be(new Date());
                expect(data.rtArrDate).to.be.a(Date);
                expect(data.rtArrDate).to.be(new Date());
              }
            }
            expect(data.journeyName).to.be.a(Reseplaneraren.JourneyName);
                  expect(data.journeyName.routeIdxTo).to.be.a('number');
              expect(data.journeyName.routeIdxTo).to.be(0);
              expect(data.journeyName.routeIdxFrom).to.be.a('number');
              expect(data.journeyName.routeIdxFrom).to.be(0);
              expect(data.journeyName.name).to.be.a('string');
              expect(data.journeyName.name).to.be("");
            expect(data.geometryRef).to.be.a(Reseplaneraren.GeometryRef);
                  expect(data.geometryRef.ref).to.be.a('string');
              expect(data.geometryRef.ref).to.be("");
            expect(data.color).to.be.a(Reseplaneraren.Color);
                  expect(data.color.bgColor).to.be.a('string');
              expect(data.color.bgColor).to.be("");
              expect(data.color.fgColor).to.be.a('string');
              expect(data.color.fgColor).to.be("");
              expect(data.color.stroke).to.be.a('string');
              expect(data.color.stroke).to.be("");
            expect(data.noNamespaceSchemaLocation).to.be.a('string');
            expect(data.noNamespaceSchemaLocation).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
