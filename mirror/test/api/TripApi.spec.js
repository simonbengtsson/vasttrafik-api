/*
 * Reseplaneraren
 * Provides access to VÃ¤sttrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Reseplaneraren);
  }
}(this, function(expect, Reseplaneraren) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Reseplaneraren.TripApi();
  });

  describe('(package)', function() {
    describe('TripApi', function() {
      describe('getTrip', function() {
        it('should call getTrip successfully', function(done) {
          // TODO: uncomment, update parameter values for getTrip call and complete the assertions
          /*
          var opts = {};
          opts.originId = 789;
          opts.originCoordLat = 1.2;
          opts.originCoordLong = 1.2;
          opts.originCoordName = "originCoordName_example";
          opts.destId = 789;
          opts.destCoordLat = 1.2;
          opts.destCoordLong = 1.2;
          opts.destCoordName = "destCoordName_example";
          opts.viaId = 789;
          opts._date = new Date("2013-10-20");
          opts.time = "time_example";
          opts.searchForArrival = "searchForArrival_example";
          opts.useVas = "useVas_example";
          opts.useLDTrain = "useLDTrain_example";
          opts.useRegTrain = "useRegTrain_example";
          opts.useBus = "useBus_example";
          opts.useMedical = "useMedical_example";
          opts.originMedicalCon = "originMedicalCon_example";
          opts.destMedicalCon = "destMedicalCon_example";
          opts.wheelChairSpace = "wheelChairSpace_example";
          opts.strollerSpace = "strollerSpace_example";
          opts.lowFloor = "lowFloor_example";
          opts.rampOrLift = "rampOrLift_example";
          opts.useBoat = "useBoat_example";
          opts.useTram = "useTram_example";
          opts.usePT = "usePT_example";
          opts.excludeDR = "excludeDR_example";
          opts.maxWalkDist = 56;
          opts.walkSpeed = "walkSpeed_example";
          opts.originWalk = "originWalk_example";
          opts.destWalk = "destWalk_example";
          opts.onlyWalk = "onlyWalk_example";
          opts.originBike = "originBike_example";
          opts.maxBikeDist = 56;
          opts.bikeCriterion = "bikeCriterion_example";
          opts.bikeProfile = "bikeProfile_example";
          opts.onlyBike = "onlyBike_example";
          opts.originCar = "originCar_example";
          opts.originCarWithParking = "originCarWithParking_example";
          opts.maxCarDist = 56;
          opts.onlyCar = "onlyCar_example";
          opts.maxChanges = 56;
          opts.additionalChangeTime = 56;
          opts.disregardDefaultChangeMargin = "disregardDefaultChangeMargin_example";
          opts.needJourneyDetail = "needJourneyDetail_example";
          opts.needGeo = "needGeo_example";
          opts.needItinerary = "needItinerary_example";
          opts.numTrips = 56;
          opts.format = "format_example";
          opts.jsonpCallback = "jsonpCallback_example";

          instance.getTrip(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Reseplaneraren.TripList);
            expect(data.errorText).to.be.a('string');
            expect(data.errorText).to.be("");
            expect(data.error).to.be.a('string');
            expect(data.error).to.be("");
            expect(data.serverdate).to.be.a(Date);
            expect(data.serverdate).to.be(new Date());
            expect(data.servertime).to.be.a('string');
            expect(data.servertime).to.be("");
            {
              let dataCtr = data.trip;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Reseplaneraren.Trip);
                {
                  let dataCtr = data.leg;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Reseplaneraren.Leg);
                    expect(data.fgColor).to.be.a('string');
                    expect(data.fgColor).to.be("");
                    expect(data.booking).to.be.a('boolean');
                    expect(data.booking).to.be(false);
                    expect(data.direction).to.be.a('string');
                    expect(data.direction).to.be("");
                    expect(data.journeyDetailRef).to.be.a(Reseplaneraren.JourneyDetailRef);
                          expect(data.journeyDetailRef.ref).to.be.a('string');
                      expect(data.journeyDetailRef.ref).to.be("");
                    expect(data.cancelled).to.be.a('boolean');
                    expect(data.cancelled).to.be(false);
                    expect(data.kcal).to.be.a('number');
                    expect(data.kcal).to.be(0.0);
                    expect(data.origin).to.be.a(Reseplaneraren.Origin);
                          expect(data.origin.routeIdx).to.be.a('string');
                      expect(data.origin.routeIdx).to.be("");
                      expect(data.origin.value).to.be.a('string');
                      expect(data.origin.value).to.be("");
                      expect(data.origin.cancelled).to.be.a('boolean');
                      expect(data.origin.cancelled).to.be(false);
                      expect(data.origin.track).to.be.a('string');
                      expect(data.origin.track).to.be("");
                      expect(data.origin.rtTrack).to.be.a('string');
                      expect(data.origin.rtTrack).to.be("");
                      expect(data.origin.type).to.be.a('string');
                      expect(data.origin.type).to.be("");
                      expect(data.origin._date).to.be.a(Date);
                      expect(data.origin._date).to.be(new Date());
                      expect(data.origin.notes).to.be.a(Reseplaneraren.Notes);
                            {
                          let dataCtr = data.origin.notes.note;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Reseplaneraren.Note);
                            expect(data.priority).to.be.a('string');
                            expect(data.priority).to.be("");
                            expect(data.severity).to.be.a('string');
                            expect(data.severity).to.be("high");
                            expect(data.key).to.be.a('string');
                            expect(data.key).to.be("");
                          }
                        }
                      expect(data.origin.id).to.be.a('string');
                      expect(data.origin.id).to.be("");
                      expect(data.origin.rtDate).to.be.a(Date);
                      expect(data.origin.rtDate).to.be(new Date());
                      expect(data.origin.time).to.be.a('string');
                      expect(data.origin.time).to.be("");
                      expect(data.origin.directdate).to.be.a(Date);
                      expect(data.origin.directdate).to.be(new Date());
                      expect(data.origin.name).to.be.a('string');
                      expect(data.origin.name).to.be("");
                      expect(data.origin.rtTime).to.be.a('string');
                      expect(data.origin.rtTime).to.be("");
                      expect(data.origin.directtime).to.be.a('string');
                      expect(data.origin.directtime).to.be("");
                    expect(data.sname).to.be.a('string');
                    expect(data.sname).to.be("");
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
                    expect(data.geometryRef).to.be.a(Reseplaneraren.GeometryRef);
                          expect(data.geometryRef.ref).to.be.a('string');
                      expect(data.geometryRef.ref).to.be("");
                    expect(data.bgColor).to.be.a('string');
                    expect(data.bgColor).to.be("");
                    expect(data.notes).to.be.a(Reseplaneraren.Notes);
                          {
                        let dataCtr = data.notes.note;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Reseplaneraren.Note);
                          expect(data.priority).to.be.a('string');
                          expect(data.priority).to.be("");
                          expect(data.severity).to.be.a('string');
                          expect(data.severity).to.be("high");
                          expect(data.key).to.be.a('string');
                          expect(data.key).to.be("");
                        }
                      }
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.stroke).to.be.a('string');
                    expect(data.stroke).to.be("");
                    expect(data.reachable).to.be.a('boolean');
                    expect(data.reachable).to.be(false);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.night).to.be.a('boolean');
                    expect(data.night).to.be(false);
                    expect(data.destination).to.be.a(Reseplaneraren.Destination);
                          expect(data.destination.routeIdx).to.be.a('string');
                      expect(data.destination.routeIdx).to.be("");
                      expect(data.destination.value).to.be.a('string');
                      expect(data.destination.value).to.be("");
                      expect(data.destination.cancelled).to.be.a('boolean');
                      expect(data.destination.cancelled).to.be(false);
                      expect(data.destination.track).to.be.a('string');
                      expect(data.destination.track).to.be("");
                      expect(data.destination.rtTrack).to.be.a('string');
                      expect(data.destination.rtTrack).to.be("");
                      expect(data.destination.type).to.be.a('string');
                      expect(data.destination.type).to.be("");
                      expect(data.destination._date).to.be.a(Date);
                      expect(data.destination._date).to.be(new Date());
                      expect(data.destination.notes).to.be.a(Reseplaneraren.Notes);
                            {
                          let dataCtr = data.destination.notes.note;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Reseplaneraren.Note);
                            expect(data.priority).to.be.a('string');
                            expect(data.priority).to.be("");
                            expect(data.severity).to.be.a('string');
                            expect(data.severity).to.be("high");
                            expect(data.key).to.be.a('string');
                            expect(data.key).to.be("");
                          }
                        }
                      expect(data.destination.id).to.be.a('string');
                      expect(data.destination.id).to.be("");
                      expect(data.destination.rtDate).to.be.a(Date);
                      expect(data.destination.rtDate).to.be(new Date());
                      expect(data.destination.time).to.be.a('string');
                      expect(data.destination.time).to.be("");
                      expect(data.destination.directdate).to.be.a(Date);
                      expect(data.destination.directdate).to.be(new Date());
                      expect(data.destination.name).to.be.a('string');
                      expect(data.destination.name).to.be("");
                      expect(data.destination.rtTime).to.be.a('string');
                      expect(data.destination.rtTime).to.be("");
                      expect(data.destination.directtime).to.be.a('string');
                      expect(data.destination.directtime).to.be("");
                    expect(data.percentBikeRoad).to.be.a('number');
                    expect(data.percentBikeRoad).to.be(0.0);
                    expect(data.accessibility).to.be.a('string');
                    expect(data.accessibility).to.be("");
                  }
                }
                expect(data.travelWarranty).to.be.a('boolean');
                expect(data.travelWarranty).to.be(false);
                expect(data.valid).to.be.a('boolean');
                expect(data.valid).to.be(false);
                expect(data.alternative).to.be.a('boolean');
                expect(data.alternative).to.be(false);
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("WALK");
              }
            }
            expect(data.noNamespaceSchemaLocation).to.be.a('string');
            expect(data.noNamespaceSchemaLocation).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
