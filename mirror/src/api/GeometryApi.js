/**
 * Reseplaneraren
 * Provides access to VÃ¤sttrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Geometry'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Geometry'));
  } else {
    // Browser globals (root is window)
    if (!root.Reseplaneraren) {
      root.Reseplaneraren = {};
    }
    root.Reseplaneraren.GeometryApi = factory(root.Reseplaneraren.ApiClient, root.Reseplaneraren.Geometry);
  }
}(this, function(ApiClient, Geometry) {
  'use strict';

  /**
   * Geometry service.
   * @module api/GeometryApi
   * @version 1.10.1
   */

  /**
   * Constructs a new GeometryApi. 
   * @alias module:api/GeometryApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getGeometry operation.
     * @callback module:api/GeometryApi~getGeometryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Geometry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the polyline for a leg.
     * Returns the polyline for a leg. This service can not be called directly but only by reference URLs in a result of a trip or JourneyDetail request. The result contains a list of WGS84 coordinates which can be used to display the polyline on a map.If the parameter needItinerary&#x3D;1 is passed in the URL of the trip request that contained the reference to the Geometry service, the geometry reference link will also contain an itinerary for walk, bike and car legs, that can be used to generate turn-by-turn instructions.
     * @param {String} ref the ref query parameter, URL decoded, from a URL retrieved as a result of a trip or JourneyDetail request
     * @param {module:api/GeometryApi~getGeometryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Geometry}
     */
    this.getGeometry = function(ref, callback) {
      var postBody = null;

      // verify the required parameter 'ref' is set
      if (ref === undefined || ref === null) {
        throw new Error("Missing the required parameter 'ref' when calling getGeometry");
      }


      var pathParams = {
      };
      var queryParams = {
        'ref': ref
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Geometry;

      return this.apiClient.callApi(
        '/geometry', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
