/**
 * Planera Resa
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import VTApiPlaneraResaWebV4ModelsApiError from '../model/VTApiPlaneraResaWebV4ModelsApiError';
import VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType from '../model/VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType';
import VTApiPlaneraResaWebV4ModelsLocationByTextType from '../model/VTApiPlaneraResaWebV4ModelsLocationByTextType';
import VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse from '../model/VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse';

/**
* Locations service.
* @module api/LocationsApi
* @version v4
*/
export default class LocationsApi {

    /**
    * Constructs a new LocationsApi. 
    * @alias module:api/LocationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the locationsByCoordinatesGet operation.
     * @callback module:api/LocationsApi~locationsByCoordinatesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the locations nearest the specified coordinates. Currently only stop areas, stop points and meta-stations are supported.
     * Sample request:        GET /locations/by-coordinates?latitude=57.708734&longitude=11.974764&radiusInMeters=500&limit=10&offset=0
     * @param {Number} latitude The latitude.
     * @param {Number} longitude The longitude.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radiusInMeters The search radius from the coordinates specified in meters. Must be a positive integer > 0. (default to 500)
     * @param {Array.<module:model/VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType>} opts.types The location types to include in the response, if none specified all locations types are included.
     * @param {Number} opts.limit The number of results to return. (default to 10)
     * @param {Number} opts.offset The zero-based start offset of the pagination. (default to 0)
     * @param {module:api/LocationsApi~locationsByCoordinatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse}
     */
    locationsByCoordinatesGet(latitude, longitude, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'latitude' is set
      if (latitude === undefined || latitude === null) {
        throw new Error("Missing the required parameter 'latitude' when calling locationsByCoordinatesGet");
      }
      // verify the required parameter 'longitude' is set
      if (longitude === undefined || longitude === null) {
        throw new Error("Missing the required parameter 'longitude' when calling locationsByCoordinatesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'latitude': latitude,
        'longitude': longitude,
        'radiusInMeters': opts['radiusInMeters'],
        'types': this.apiClient.buildCollectionParam(opts['types'], 'multi'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse;
      return this.apiClient.callApi(
        '/locations/by-coordinates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the locationsByTextGet operation.
     * @callback module:api/LocationsApi~locationsByTextGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns locations matching the specified text. Currently only stop areas, addresses, points of interest and meta-stations are supported.
     * Sample request:        GET /locations/by-text?q=brunnsparken&limit=10&offset=0
     * @param {String} q The search text (e.g. 'brunn', 'cent' or 'Kungsgatan'). The maximum length allowed is 256 characters.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/VTApiPlaneraResaWebV4ModelsLocationByTextType>} opts.types The location types to include in the response, if none specified all locations types are included.
     * @param {Number} opts.limit The number of results to return. (default to 10)
     * @param {Number} opts.offset The zero-based start offset of the pagination. (default to 0)
     * @param {module:api/LocationsApi~locationsByTextGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse}
     */
    locationsByTextGet(q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling locationsByTextGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'types': this.apiClient.buildCollectionParam(opts['types'], 'multi'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse;
      return this.apiClient.callApi(
        '/locations/by-text', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
