/**
 * Reseplaneraren
 * Provides access to VÃ¤sttrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Arrival', 'model/ArrivalBoard', 'model/Color', 'model/CoordLocation', 'model/CreationDate', 'model/DateBegin', 'model/DateEnd', 'model/Departure', 'model/DepartureBoard', 'model/Destination', 'model/Direction', 'model/Geometry', 'model/GeometryRef', 'model/JourneyDetail', 'model/JourneyDetailRef', 'model/JourneyId', 'model/JourneyName', 'model/JourneyType', 'model/Leg', 'model/LiveMap', 'model/LocationList', 'model/Note', 'model/Notes', 'model/Origin', 'model/Point', 'model/Points', 'model/Stop', 'model/StopLocation', 'model/SystemInfo', 'model/TimeTableData', 'model/TimeTablePeriod', 'model/TimetableInfo', 'model/Trip', 'model/TripList', 'model/Vehicle', 'api/ArrivalBoardApi', 'api/DepartureBoardApi', 'api/GeometryApi', 'api/JourneyDetailApi', 'api/LivemapApi', 'api/LocationApi', 'api/SysteminfoApi', 'api/TripApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Arrival'), require('./model/ArrivalBoard'), require('./model/Color'), require('./model/CoordLocation'), require('./model/CreationDate'), require('./model/DateBegin'), require('./model/DateEnd'), require('./model/Departure'), require('./model/DepartureBoard'), require('./model/Destination'), require('./model/Direction'), require('./model/Geometry'), require('./model/GeometryRef'), require('./model/JourneyDetail'), require('./model/JourneyDetailRef'), require('./model/JourneyId'), require('./model/JourneyName'), require('./model/JourneyType'), require('./model/Leg'), require('./model/LiveMap'), require('./model/LocationList'), require('./model/Note'), require('./model/Notes'), require('./model/Origin'), require('./model/Point'), require('./model/Points'), require('./model/Stop'), require('./model/StopLocation'), require('./model/SystemInfo'), require('./model/TimeTableData'), require('./model/TimeTablePeriod'), require('./model/TimetableInfo'), require('./model/Trip'), require('./model/TripList'), require('./model/Vehicle'), require('./api/ArrivalBoardApi'), require('./api/DepartureBoardApi'), require('./api/GeometryApi'), require('./api/JourneyDetailApi'), require('./api/LivemapApi'), require('./api/LocationApi'), require('./api/SysteminfoApi'), require('./api/TripApi'));
  }
}(function(ApiClient, Arrival, ArrivalBoard, Color, CoordLocation, CreationDate, DateBegin, DateEnd, Departure, DepartureBoard, Destination, Direction, Geometry, GeometryRef, JourneyDetail, JourneyDetailRef, JourneyId, JourneyName, JourneyType, Leg, LiveMap, LocationList, Note, Notes, Origin, Point, Points, Stop, StopLocation, SystemInfo, TimeTableData, TimeTablePeriod, TimetableInfo, Trip, TripList, Vehicle, ArrivalBoardApi, DepartureBoardApi, GeometryApi, JourneyDetailApi, LivemapApi, LocationApi, SysteminfoApi, TripApi) {
  'use strict';

  /**
   * Provides_access_to_Vsttrafik_journey_planner.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var Reseplaneraren = require('index'); // See note below*.
   * var xxxSvc = new Reseplaneraren.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new Reseplaneraren.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new Reseplaneraren.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new Reseplaneraren.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.10.1
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Arrival model constructor.
     * @property {module:model/Arrival}
     */
    Arrival: Arrival,
    /**
     * The ArrivalBoard model constructor.
     * @property {module:model/ArrivalBoard}
     */
    ArrivalBoard: ArrivalBoard,
    /**
     * The Color model constructor.
     * @property {module:model/Color}
     */
    Color: Color,
    /**
     * The CoordLocation model constructor.
     * @property {module:model/CoordLocation}
     */
    CoordLocation: CoordLocation,
    /**
     * The CreationDate model constructor.
     * @property {module:model/CreationDate}
     */
    CreationDate: CreationDate,
    /**
     * The DateBegin model constructor.
     * @property {module:model/DateBegin}
     */
    DateBegin: DateBegin,
    /**
     * The DateEnd model constructor.
     * @property {module:model/DateEnd}
     */
    DateEnd: DateEnd,
    /**
     * The Departure model constructor.
     * @property {module:model/Departure}
     */
    Departure: Departure,
    /**
     * The DepartureBoard model constructor.
     * @property {module:model/DepartureBoard}
     */
    DepartureBoard: DepartureBoard,
    /**
     * The Destination model constructor.
     * @property {module:model/Destination}
     */
    Destination: Destination,
    /**
     * The Direction model constructor.
     * @property {module:model/Direction}
     */
    Direction: Direction,
    /**
     * The Geometry model constructor.
     * @property {module:model/Geometry}
     */
    Geometry: Geometry,
    /**
     * The GeometryRef model constructor.
     * @property {module:model/GeometryRef}
     */
    GeometryRef: GeometryRef,
    /**
     * The JourneyDetail model constructor.
     * @property {module:model/JourneyDetail}
     */
    JourneyDetail: JourneyDetail,
    /**
     * The JourneyDetailRef model constructor.
     * @property {module:model/JourneyDetailRef}
     */
    JourneyDetailRef: JourneyDetailRef,
    /**
     * The JourneyId model constructor.
     * @property {module:model/JourneyId}
     */
    JourneyId: JourneyId,
    /**
     * The JourneyName model constructor.
     * @property {module:model/JourneyName}
     */
    JourneyName: JourneyName,
    /**
     * The JourneyType model constructor.
     * @property {module:model/JourneyType}
     */
    JourneyType: JourneyType,
    /**
     * The Leg model constructor.
     * @property {module:model/Leg}
     */
    Leg: Leg,
    /**
     * The LiveMap model constructor.
     * @property {module:model/LiveMap}
     */
    LiveMap: LiveMap,
    /**
     * The LocationList model constructor.
     * @property {module:model/LocationList}
     */
    LocationList: LocationList,
    /**
     * The Note model constructor.
     * @property {module:model/Note}
     */
    Note: Note,
    /**
     * The Notes model constructor.
     * @property {module:model/Notes}
     */
    Notes: Notes,
    /**
     * The Origin model constructor.
     * @property {module:model/Origin}
     */
    Origin: Origin,
    /**
     * The Point model constructor.
     * @property {module:model/Point}
     */
    Point: Point,
    /**
     * The Points model constructor.
     * @property {module:model/Points}
     */
    Points: Points,
    /**
     * The Stop model constructor.
     * @property {module:model/Stop}
     */
    Stop: Stop,
    /**
     * The StopLocation model constructor.
     * @property {module:model/StopLocation}
     */
    StopLocation: StopLocation,
    /**
     * The SystemInfo model constructor.
     * @property {module:model/SystemInfo}
     */
    SystemInfo: SystemInfo,
    /**
     * The TimeTableData model constructor.
     * @property {module:model/TimeTableData}
     */
    TimeTableData: TimeTableData,
    /**
     * The TimeTablePeriod model constructor.
     * @property {module:model/TimeTablePeriod}
     */
    TimeTablePeriod: TimeTablePeriod,
    /**
     * The TimetableInfo model constructor.
     * @property {module:model/TimetableInfo}
     */
    TimetableInfo: TimetableInfo,
    /**
     * The Trip model constructor.
     * @property {module:model/Trip}
     */
    Trip: Trip,
    /**
     * The TripList model constructor.
     * @property {module:model/TripList}
     */
    TripList: TripList,
    /**
     * The Vehicle model constructor.
     * @property {module:model/Vehicle}
     */
    Vehicle: Vehicle,
    /**
     * The ArrivalBoardApi service constructor.
     * @property {module:api/ArrivalBoardApi}
     */
    ArrivalBoardApi: ArrivalBoardApi,
    /**
     * The DepartureBoardApi service constructor.
     * @property {module:api/DepartureBoardApi}
     */
    DepartureBoardApi: DepartureBoardApi,
    /**
     * The GeometryApi service constructor.
     * @property {module:api/GeometryApi}
     */
    GeometryApi: GeometryApi,
    /**
     * The JourneyDetailApi service constructor.
     * @property {module:api/JourneyDetailApi}
     */
    JourneyDetailApi: JourneyDetailApi,
    /**
     * The LivemapApi service constructor.
     * @property {module:api/LivemapApi}
     */
    LivemapApi: LivemapApi,
    /**
     * The LocationApi service constructor.
     * @property {module:api/LocationApi}
     */
    LocationApi: LocationApi,
    /**
     * The SysteminfoApi service constructor.
     * @property {module:api/SysteminfoApi}
     */
    SysteminfoApi: SysteminfoApi,
    /**
     * The TripApi service constructor.
     * @property {module:api/TripApi}
     */
    TripApi: TripApi
  };

  return exports;
}));
