/**
 * Planera Resa
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VTApiPlaneraResaCoreModelsNote from './VTApiPlaneraResaCoreModelsNote';
import VTApiPlaneraResaWebV4ModelsJourneysCallApiModel from './VTApiPlaneraResaWebV4ModelsJourneysCallApiModel';
import VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel from './VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel';
import VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel from './VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel';

/**
 * The VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel model module.
 * @module model/VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel
 * @version v4
 */
class VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel {
    /**
     * Constructs a new <code>VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel</code>.
     * Information about a journey trip leg.
     * @alias module:model/VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel
     * @param origin {module:model/VTApiPlaneraResaWebV4ModelsJourneysCallApiModel} 
     * @param destination {module:model/VTApiPlaneraResaWebV4ModelsJourneysCallApiModel} 
     * @param isCancelled {Boolean} Flag indicating if the trip leg is cancelled.
     */
    constructor(origin, destination, isCancelled) { 
        
        VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.initialize(this, origin, destination, isCancelled);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, origin, destination, isCancelled) { 
        obj['origin'] = origin;
        obj['destination'] = destination;
        obj['isCancelled'] = isCancelled;
    }

    /**
     * Constructs a <code>VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel} obj Optional instance to populate.
     * @return {module:model/VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel} The populated <code>VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel();

            if (data.hasOwnProperty('origin')) {
                obj['origin'] = VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.constructFromObject(data['origin']);
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.constructFromObject(data['destination']);
            }
            if (data.hasOwnProperty('isCancelled')) {
                obj['isCancelled'] = ApiClient.convertToType(data['isCancelled'], 'Boolean');
            }
            if (data.hasOwnProperty('isPartCancelled')) {
                obj['isPartCancelled'] = ApiClient.convertToType(data['isPartCancelled'], 'Boolean');
            }
            if (data.hasOwnProperty('serviceJourney')) {
                obj['serviceJourney'] = VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel.constructFromObject(data['serviceJourney']);
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], [VTApiPlaneraResaCoreModelsNote]);
            }
            if (data.hasOwnProperty('estimatedDistanceInMeters')) {
                obj['estimatedDistanceInMeters'] = ApiClient.convertToType(data['estimatedDistanceInMeters'], 'Number');
            }
            if (data.hasOwnProperty('plannedConnectingTimeInMinutes')) {
                obj['plannedConnectingTimeInMinutes'] = ApiClient.convertToType(data['plannedConnectingTimeInMinutes'], 'Number');
            }
            if (data.hasOwnProperty('estimatedConnectingTimeInMinutes')) {
                obj['estimatedConnectingTimeInMinutes'] = ApiClient.convertToType(data['estimatedConnectingTimeInMinutes'], 'Number');
            }
            if (data.hasOwnProperty('isRiskOfMissingConnection')) {
                obj['isRiskOfMissingConnection'] = ApiClient.convertToType(data['isRiskOfMissingConnection'], 'Boolean');
            }
            if (data.hasOwnProperty('plannedDepartureTime')) {
                obj['plannedDepartureTime'] = ApiClient.convertToType(data['plannedDepartureTime'], 'String');
            }
            if (data.hasOwnProperty('plannedArrivalTime')) {
                obj['plannedArrivalTime'] = ApiClient.convertToType(data['plannedArrivalTime'], 'String');
            }
            if (data.hasOwnProperty('plannedDurationInMinutes')) {
                obj['plannedDurationInMinutes'] = ApiClient.convertToType(data['plannedDurationInMinutes'], 'Number');
            }
            if (data.hasOwnProperty('estimatedDepartureTime')) {
                obj['estimatedDepartureTime'] = ApiClient.convertToType(data['estimatedDepartureTime'], 'String');
            }
            if (data.hasOwnProperty('estimatedArrivalTime')) {
                obj['estimatedArrivalTime'] = ApiClient.convertToType(data['estimatedArrivalTime'], 'String');
            }
            if (data.hasOwnProperty('estimatedDurationInMinutes')) {
                obj['estimatedDurationInMinutes'] = ApiClient.convertToType(data['estimatedDurationInMinutes'], 'Number');
            }
            if (data.hasOwnProperty('estimatedOtherwisePlannedArrivalTime')) {
                obj['estimatedOtherwisePlannedArrivalTime'] = ApiClient.convertToType(data['estimatedOtherwisePlannedArrivalTime'], 'String');
            }
            if (data.hasOwnProperty('estimatedOtherwisePlannedDepartureTime')) {
                obj['estimatedOtherwisePlannedDepartureTime'] = ApiClient.convertToType(data['estimatedOtherwisePlannedDepartureTime'], 'String');
            }
            if (data.hasOwnProperty('occupancy')) {
                obj['occupancy'] = VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel.constructFromObject(data['occupancy']);
            }
            if (data.hasOwnProperty('journeyLegIndex')) {
                obj['journeyLegIndex'] = ApiClient.convertToType(data['journeyLegIndex'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `origin`
        if (data['origin']) { // data not null
          VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.validateJSON(data['origin']);
        }
        // validate the optional field `destination`
        if (data['destination']) { // data not null
          VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.validateJSON(data['destination']);
        }
        // validate the optional field `serviceJourney`
        if (data['serviceJourney']) { // data not null
          VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel.validateJSON(data['serviceJourney']);
        }
        if (data['notes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['notes'])) {
                throw new Error("Expected the field `notes` to be an array in the JSON data but got " + data['notes']);
            }
            // validate the optional field `notes` (array)
            for (const item of data['notes']) {
                VTApiPlaneraResaCoreModelsNote.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['plannedDepartureTime'] && !(typeof data['plannedDepartureTime'] === 'string' || data['plannedDepartureTime'] instanceof String)) {
            throw new Error("Expected the field `plannedDepartureTime` to be a primitive type in the JSON string but got " + data['plannedDepartureTime']);
        }
        // ensure the json data is a string
        if (data['plannedArrivalTime'] && !(typeof data['plannedArrivalTime'] === 'string' || data['plannedArrivalTime'] instanceof String)) {
            throw new Error("Expected the field `plannedArrivalTime` to be a primitive type in the JSON string but got " + data['plannedArrivalTime']);
        }
        // ensure the json data is a string
        if (data['estimatedDepartureTime'] && !(typeof data['estimatedDepartureTime'] === 'string' || data['estimatedDepartureTime'] instanceof String)) {
            throw new Error("Expected the field `estimatedDepartureTime` to be a primitive type in the JSON string but got " + data['estimatedDepartureTime']);
        }
        // ensure the json data is a string
        if (data['estimatedArrivalTime'] && !(typeof data['estimatedArrivalTime'] === 'string' || data['estimatedArrivalTime'] instanceof String)) {
            throw new Error("Expected the field `estimatedArrivalTime` to be a primitive type in the JSON string but got " + data['estimatedArrivalTime']);
        }
        // ensure the json data is a string
        if (data['estimatedOtherwisePlannedArrivalTime'] && !(typeof data['estimatedOtherwisePlannedArrivalTime'] === 'string' || data['estimatedOtherwisePlannedArrivalTime'] instanceof String)) {
            throw new Error("Expected the field `estimatedOtherwisePlannedArrivalTime` to be a primitive type in the JSON string but got " + data['estimatedOtherwisePlannedArrivalTime']);
        }
        // ensure the json data is a string
        if (data['estimatedOtherwisePlannedDepartureTime'] && !(typeof data['estimatedOtherwisePlannedDepartureTime'] === 'string' || data['estimatedOtherwisePlannedDepartureTime'] instanceof String)) {
            throw new Error("Expected the field `estimatedOtherwisePlannedDepartureTime` to be a primitive type in the JSON string but got " + data['estimatedOtherwisePlannedDepartureTime']);
        }
        // validate the optional field `occupancy`
        if (data['occupancy']) { // data not null
          VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel.validateJSON(data['occupancy']);
        }

        return true;
    }


}

VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.RequiredProperties = ["origin", "destination", "isCancelled"];

/**
 * @member {module:model/VTApiPlaneraResaWebV4ModelsJourneysCallApiModel} origin
 */
VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.prototype['origin'] = undefined;

/**
 * @member {module:model/VTApiPlaneraResaWebV4ModelsJourneysCallApiModel} destination
 */
VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.prototype['destination'] = undefined;

/**
 * Flag indicating if the trip leg is cancelled.
 * @member {Boolean} isCancelled
 */
VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.prototype['isCancelled'] = undefined;

/**
 * Flag indicating if the trip leg is partially cancelled.
 * @member {Boolean} isPartCancelled
 */
VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.prototype['isPartCancelled'] = undefined;

/**
 * @member {module:model/VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel} serviceJourney
 */
VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.prototype['serviceJourney'] = undefined;

/**
 * An ordered list (most important first) of notes related to the trip leg.
 * @member {Array.<module:model/VTApiPlaneraResaCoreModelsNote>} notes
 */
VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.prototype['notes'] = undefined;

/**
 * Estimated distance in meters. Only for transport mode Walk.
 * @member {Number} estimatedDistanceInMeters
 */
VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.prototype['estimatedDistanceInMeters'] = undefined;

/**
 * The planned (according to timetable) connecting time in minutes relative to  the previous public transport trip leg (if any).
 * @member {Number} plannedConnectingTimeInMinutes
 */
VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.prototype['plannedConnectingTimeInMinutes'] = undefined;

/**
 * The estimated (according to real-time data) connecting time in minutes relative to  the previous public transport trip leg (if any).
 * @member {Number} estimatedConnectingTimeInMinutes
 */
VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.prototype['estimatedConnectingTimeInMinutes'] = undefined;

/**
 * Flag indicating that there is less than 5 minutes margin between arriving at the  origin stop point and the departure from that stop point.
 * @member {Boolean} isRiskOfMissingConnection
 */
VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.prototype['isRiskOfMissingConnection'] = undefined;

/**
 * The planned departure time in RFC 3339 format.
 * @member {String} plannedDepartureTime
 */
VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.prototype['plannedDepartureTime'] = undefined;

/**
 * The planned arrival time in RFC 3339 format.
 * @member {String} plannedArrivalTime
 */
VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.prototype['plannedArrivalTime'] = undefined;

/**
 * The planned duration in minutes.
 * @member {Number} plannedDurationInMinutes
 */
VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.prototype['plannedDurationInMinutes'] = undefined;

/**
 * The estimated departure time in RFC 3339 format, if available.
 * @member {String} estimatedDepartureTime
 */
VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.prototype['estimatedDepartureTime'] = undefined;

/**
 * The estimated arrival time in RFC 3339 format, if available.
 * @member {String} estimatedArrivalTime
 */
VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.prototype['estimatedArrivalTime'] = undefined;

/**
 * The estimated duration in minutes, if available.
 * @member {Number} estimatedDurationInMinutes
 */
VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.prototype['estimatedDurationInMinutes'] = undefined;

/**
 * The best known time of the arrival in RFC 3339 format. Is EstimatedArrivalTime if exists, otherwise PlannedArrivalTime.
 * @member {String} estimatedOtherwisePlannedArrivalTime
 */
VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.prototype['estimatedOtherwisePlannedArrivalTime'] = undefined;

/**
 * The best known time of the departure in RFC 3339 format. Is EstimatedDepartureTime if exists, otherwise PlannedDepartureTime.
 * @member {String} estimatedOtherwisePlannedDepartureTime
 */
VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.prototype['estimatedOtherwisePlannedDepartureTime'] = undefined;

/**
 * @member {module:model/VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel} occupancy
 */
VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.prototype['occupancy'] = undefined;

/**
 * Index of Leg in Journey
 * @member {Number} journeyLegIndex
 */
VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.prototype['journeyLegIndex'] = undefined;






export default VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel;

