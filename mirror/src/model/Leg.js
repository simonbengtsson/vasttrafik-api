/**
 * Reseplaneraren
 * Provides access to VÃ¤sttrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Destination', 'model/GeometryRef', 'model/JourneyDetailRef', 'model/Notes', 'model/Origin'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Destination'), require('./GeometryRef'), require('./JourneyDetailRef'), require('./Notes'), require('./Origin'));
  } else {
    // Browser globals (root is window)
    if (!root.Reseplaneraren) {
      root.Reseplaneraren = {};
    }
    root.Reseplaneraren.Leg = factory(root.Reseplaneraren.ApiClient, root.Reseplaneraren.Destination, root.Reseplaneraren.GeometryRef, root.Reseplaneraren.JourneyDetailRef, root.Reseplaneraren.Notes, root.Reseplaneraren.Origin);
  }
}(this, function(ApiClient, Destination, GeometryRef, JourneyDetailRef, Notes, Origin) {
  'use strict';




  /**
   * The Leg model module.
   * @module model/Leg
   * @version 1.10.1
   */

  /**
   * Constructs a new <code>Leg</code>.
   * @alias module:model/Leg
   * @class
   * @param type {String} The attribute type specifies the type of the leg. Valid values are VAS, LDT (Long Distance Train), REG (Regional train), BUS , BOAT, TRAM, TAXI (Taxi/Telebus). Furthermore it can be of type WALK, BIKE and CAR if these legs are routes on the street network
   * @param name {String} The attribute name specifies the name of the leg
   */
  var exports = function(type, name) {
    var _this = this;









    _this['type'] = type;






    _this['name'] = name;




  };

  /**
   * Constructs a <code>Leg</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Leg} obj Optional instance to populate.
   * @return {module:model/Leg} The populated <code>Leg</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('fgColor')) {
        obj['fgColor'] = ApiClient.convertToType(data['fgColor'], 'String');
      }
      if (data.hasOwnProperty('booking')) {
        obj['booking'] = ApiClient.convertToType(data['booking'], 'Boolean');
      }
      if (data.hasOwnProperty('direction')) {
        obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
      }
      if (data.hasOwnProperty('JourneyDetailRef')) {
        obj['JourneyDetailRef'] = JourneyDetailRef.constructFromObject(data['JourneyDetailRef']);
      }
      if (data.hasOwnProperty('cancelled')) {
        obj['cancelled'] = ApiClient.convertToType(data['cancelled'], 'Boolean');
      }
      if (data.hasOwnProperty('kcal')) {
        obj['kcal'] = ApiClient.convertToType(data['kcal'], 'Number');
      }
      if (data.hasOwnProperty('Origin')) {
        obj['Origin'] = Origin.constructFromObject(data['Origin']);
      }
      if (data.hasOwnProperty('sname')) {
        obj['sname'] = ApiClient.convertToType(data['sname'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('GeometryRef')) {
        obj['GeometryRef'] = GeometryRef.constructFromObject(data['GeometryRef']);
      }
      if (data.hasOwnProperty('bgColor')) {
        obj['bgColor'] = ApiClient.convertToType(data['bgColor'], 'String');
      }
      if (data.hasOwnProperty('Notes')) {
        obj['Notes'] = Notes.constructFromObject(data['Notes']);
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('stroke')) {
        obj['stroke'] = ApiClient.convertToType(data['stroke'], 'String');
      }
      if (data.hasOwnProperty('reachable')) {
        obj['reachable'] = ApiClient.convertToType(data['reachable'], 'Boolean');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('night')) {
        obj['night'] = ApiClient.convertToType(data['night'], 'Boolean');
      }
      if (data.hasOwnProperty('Destination')) {
        obj['Destination'] = Destination.constructFromObject(data['Destination']);
      }
      if (data.hasOwnProperty('percentBikeRoad')) {
        obj['percentBikeRoad'] = ApiClient.convertToType(data['percentBikeRoad'], 'Number');
      }
      if (data.hasOwnProperty('accessibility')) {
        obj['accessibility'] = ApiClient.convertToType(data['accessibility'], 'String');
      }
    }
    return obj;
  }

  /**
   * Foregroundcolor of this line
   * @member {String} fgColor
   */
  exports.prototype['fgColor'] = undefined;
  /**
   * Will be true if this journey needs to be booked
   * @member {Boolean} booking
   */
  exports.prototype['booking'] = undefined;
  /**
   * Direction information
   * @member {String} direction
   */
  exports.prototype['direction'] = undefined;
  /**
   * @member {module:model/JourneyDetailRef} JourneyDetailRef
   */
  exports.prototype['JourneyDetailRef'] = undefined;
  /**
   * Will be true if this journey is cancelled
   * @member {Boolean} cancelled
   */
  exports.prototype['cancelled'] = undefined;
  /**
   * Energy use
   * @member {Number} kcal
   */
  exports.prototype['kcal'] = undefined;
  /**
   * @member {module:model/Origin} Origin
   */
  exports.prototype['Origin'] = undefined;
  /**
   * Short name of the leg
   * @member {String} sname
   */
  exports.prototype['sname'] = undefined;
  /**
   * The attribute type specifies the type of the leg. Valid values are VAS, LDT (Long Distance Train), REG (Regional train), BUS , BOAT, TRAM, TAXI (Taxi/Telebus). Furthermore it can be of type WALK, BIKE and CAR if these legs are routes on the street network
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * @member {module:model/GeometryRef} GeometryRef
   */
  exports.prototype['GeometryRef'] = undefined;
  /**
   * Backgroundcolor of this line
   * @member {String} bgColor
   */
  exports.prototype['bgColor'] = undefined;
  /**
   * @member {module:model/Notes} Notes
   */
  exports.prototype['Notes'] = undefined;
  /**
   * ID of the journey
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * Stroke style of this line
   * @member {String} stroke
   */
  exports.prototype['stroke'] = undefined;
  /**
   * Will be true if this journey is not reachable due to delay of the feeder
   * @member {Boolean} reachable
   */
  exports.prototype['reachable'] = undefined;
  /**
   * The attribute name specifies the name of the leg
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Will be true if this journey is a night journey
   * @member {Boolean} night
   */
  exports.prototype['night'] = undefined;
  /**
   * @member {module:model/Destination} Destination
   */
  exports.prototype['Destination'] = undefined;
  /**
   * Percentage of the route that is made up of bike roads
   * @member {Number} percentBikeRoad
   */
  exports.prototype['percentBikeRoad'] = undefined;
  /**
   * will only be set if the vehicle has wheelchair + ramp/lift or lowfloor according to realtime data
   * @member {String} accessibility
   */
  exports.prototype['accessibility'] = undefined;



  return exports;
}));


