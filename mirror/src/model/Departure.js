/**
 * Reseplaneraren
 * Provides access to VÃ¤sttrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/JourneyDetailRef'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./JourneyDetailRef'));
  } else {
    // Browser globals (root is window)
    if (!root.Reseplaneraren) {
      root.Reseplaneraren = {};
    }
    root.Reseplaneraren.Departure = factory(root.Reseplaneraren.ApiClient, root.Reseplaneraren.JourneyDetailRef);
  }
}(this, function(ApiClient, JourneyDetailRef) {
  'use strict';




  /**
   * The Departure model module.
   * @module model/Departure
   * @version 1.10.1
   */

  /**
   * Constructs a new <code>Departure</code>.
   * @alias module:model/Departure
   * @class
   * @param fgColor {String} Foregroundcolor of this line
   * @param stop {String} Contains the name of the stop/station
   * @param direction {String} Direction information
   * @param journeyDetailRef {module:model/JourneyDetailRef} 
   * @param track {String} Track information, if available
   * @param sname {String} Short name of the leg
   * @param type {String} The attribute type specifies the type of the departing journey. Valid values are VAS, LDT (Long Distance Train), REG (Regional train), BUS , BOAT, TRAM, TAXI (Taxi/Telebus)
   * @param _date {Date} Date in format YYYY-MM-DD
   * @param bgColor {String} Backgroundcolor of this line
   * @param stroke {String} Stroke style of this line
   * @param rtDate {Date} Realtime date in format YYYY-MM-DD, if available
   * @param time {String} Time in format HH:MM
   * @param name {String} The attribute name specifies the name of the departing journey
   * @param rtTime {String} Realtime time in format HH:MM if available
   * @param stopid {String} Contains the id of the stop/station
   * @param journeyid {String} Contains the id of the journey
   * @param accessibility {module:model/Departure.AccessibilityEnum} will only be set if the vehicle has wheelchair + ramp/lift or lowfloor according to realtime data
   */
  var exports = function(fgColor, stop, direction, journeyDetailRef, track, sname, type, _date, bgColor, stroke, rtDate, time, name, rtTime, stopid, journeyid, accessibility) {
    var _this = this;

    _this['fgColor'] = fgColor;
    _this['stop'] = stop;

    _this['direction'] = direction;
    _this['JourneyDetailRef'] = journeyDetailRef;
    _this['track'] = track;

    _this['sname'] = sname;
    _this['type'] = type;
    _this['date'] = _date;
    _this['bgColor'] = bgColor;
    _this['stroke'] = stroke;
    _this['rtDate'] = rtDate;
    _this['time'] = time;
    _this['name'] = name;
    _this['rtTime'] = rtTime;

    _this['stopid'] = stopid;
    _this['journeyid'] = journeyid;
    _this['accessibility'] = accessibility;
  };

  /**
   * Constructs a <code>Departure</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Departure} obj Optional instance to populate.
   * @return {module:model/Departure} The populated <code>Departure</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('fgColor')) {
        obj['fgColor'] = ApiClient.convertToType(data['fgColor'], 'String');
      }
      if (data.hasOwnProperty('stop')) {
        obj['stop'] = ApiClient.convertToType(data['stop'], 'String');
      }
      if (data.hasOwnProperty('booking')) {
        obj['booking'] = ApiClient.convertToType(data['booking'], 'Boolean');
      }
      if (data.hasOwnProperty('direction')) {
        obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
      }
      if (data.hasOwnProperty('JourneyDetailRef')) {
        obj['JourneyDetailRef'] = JourneyDetailRef.constructFromObject(data['JourneyDetailRef']);
      }
      if (data.hasOwnProperty('track')) {
        obj['track'] = ApiClient.convertToType(data['track'], 'String');
      }
      if (data.hasOwnProperty('rtTrack')) {
        obj['rtTrack'] = ApiClient.convertToType(data['rtTrack'], 'String');
      }
      if (data.hasOwnProperty('sname')) {
        obj['sname'] = ApiClient.convertToType(data['sname'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('date')) {
        obj['date'] = ApiClient.convertToType(data['date'], 'Date');
      }
      if (data.hasOwnProperty('bgColor')) {
        obj['bgColor'] = ApiClient.convertToType(data['bgColor'], 'String');
      }
      if (data.hasOwnProperty('stroke')) {
        obj['stroke'] = ApiClient.convertToType(data['stroke'], 'String');
      }
      if (data.hasOwnProperty('rtDate')) {
        obj['rtDate'] = ApiClient.convertToType(data['rtDate'], 'Date');
      }
      if (data.hasOwnProperty('time')) {
        obj['time'] = ApiClient.convertToType(data['time'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('rtTime')) {
        obj['rtTime'] = ApiClient.convertToType(data['rtTime'], 'String');
      }
      if (data.hasOwnProperty('night')) {
        obj['night'] = ApiClient.convertToType(data['night'], 'Boolean');
      }
      if (data.hasOwnProperty('stopid')) {
        obj['stopid'] = ApiClient.convertToType(data['stopid'], 'String');
      }
      if (data.hasOwnProperty('journeyid')) {
        obj['journeyid'] = ApiClient.convertToType(data['journeyid'], 'String');
      }
      if (data.hasOwnProperty('accessibility')) {
        obj['accessibility'] = ApiClient.convertToType(data['accessibility'], 'String');
      }
    }
    return obj;
  }

  /**
   * Foregroundcolor of this line
   * @member {String} fgColor
   */
  exports.prototype['fgColor'] = undefined;
  /**
   * Contains the name of the stop/station
   * @member {String} stop
   */
  exports.prototype['stop'] = undefined;
  /**
   * Will be true if this journey needs to be booked
   * @member {Boolean} booking
   */
  exports.prototype['booking'] = undefined;
  /**
   * Direction information
   * @member {String} direction
   */
  exports.prototype['direction'] = undefined;
  /**
   * @member {module:model/JourneyDetailRef} JourneyDetailRef
   */
  exports.prototype['JourneyDetailRef'] = undefined;
  /**
   * Track information, if available
   * @member {String} track
   */
  exports.prototype['track'] = undefined;
  /**
   * Realtime track information, if available
   * @member {String} rtTrack
   */
  exports.prototype['rtTrack'] = undefined;
  /**
   * Short name of the leg
   * @member {String} sname
   */
  exports.prototype['sname'] = undefined;
  /**
   * The attribute type specifies the type of the departing journey. Valid values are VAS, LDT (Long Distance Train), REG (Regional train), BUS , BOAT, TRAM, TAXI (Taxi/Telebus)
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Date in format YYYY-MM-DD
   * @member {Date} date
   */
  exports.prototype['date'] = undefined;
  /**
   * Backgroundcolor of this line
   * @member {String} bgColor
   */
  exports.prototype['bgColor'] = undefined;
  /**
   * Stroke style of this line
   * @member {String} stroke
   */
  exports.prototype['stroke'] = undefined;
  /**
   * Realtime date in format YYYY-MM-DD, if available
   * @member {Date} rtDate
   */
  exports.prototype['rtDate'] = undefined;
  /**
   * Time in format HH:MM
   * @member {String} time
   */
  exports.prototype['time'] = undefined;
  /**
   * The attribute name specifies the name of the departing journey
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Realtime time in format HH:MM if available
   * @member {String} rtTime
   */
  exports.prototype['rtTime'] = undefined;
  /**
   * Will be true if this journey is a night journey
   * @member {Boolean} night
   */
  exports.prototype['night'] = undefined;
  /**
   * Contains the id of the stop/station
   * @member {String} stopid
   */
  exports.prototype['stopid'] = undefined;
  /**
   * Contains the id of the journey
   * @member {String} journeyid
   */
  exports.prototype['journeyid'] = undefined;
  /**
   * will only be set if the vehicle has wheelchair + ramp/lift or lowfloor according to realtime data
   * @member {module:model/Departure.AccessibilityEnum} accessibility
   */
  exports.prototype['accessibility'] = undefined;


  /**
   * Allowed values for the <code>accessibility</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AccessibilityEnum = {
    /**
     * value: "wheelChair"
     * @const
     */
    "wheelChair": "wheelChair",
    /**
     * value: "lowFloor"
     * @const
     */
    "lowFloor": "lowFloor"  };


  return exports;
}));


