/**
 * Reseplaneraren
 * Provides access to VÃ¤sttrafik journey planner
 *
 * OpenAPI spec version: 1.10.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Reseplaneraren) {
      root.Reseplaneraren = {};
    }
    root.Reseplaneraren.Vehicle = factory(root.Reseplaneraren.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Vehicle model module.
   * @module model/Vehicle
   * @version 1.10.1
   */

  /**
   * Constructs a new <code>Vehicle</code>.
   * @alias module:model/Vehicle
   * @class
   * @param lcolor {String} Line color of the journey
   * @param prodClass {module:model/Vehicle.ProdClassEnum} Product class
   * @param bcolor {String} Background color of the journey
   * @param direction {Number} Direction of the vehicle. This is a value between 0 and 31 which is describing a direction vector
   * @param name {String} Journey name
   * @param gid {String} Service GID
   * @param delay {Number} Current delay of the vehicle in minutes, can be negative, zero or positive
   * @param y {Number} Y coordinate (latitude) of the position in WGS84 * 1000000
   * @param x {Number} X coordinate (longitude) of the position in WGS84 * 1000000
   */
  var exports = function(lcolor, prodClass, bcolor, direction, name, gid, delay, y, x) {
    var _this = this;

    _this['lcolor'] = lcolor;
    _this['prodClass'] = prodClass;
    _this['bcolor'] = bcolor;
    _this['direction'] = direction;
    _this['name'] = name;
    _this['gid'] = gid;
    _this['delay'] = delay;
    _this['y'] = y;
    _this['x'] = x;
  };

  /**
   * Constructs a <code>Vehicle</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Vehicle} obj Optional instance to populate.
   * @return {module:model/Vehicle} The populated <code>Vehicle</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('lcolor')) {
        obj['lcolor'] = ApiClient.convertToType(data['lcolor'], 'String');
      }
      if (data.hasOwnProperty('prodClass')) {
        obj['prodClass'] = ApiClient.convertToType(data['prodClass'], 'String');
      }
      if (data.hasOwnProperty('bcolor')) {
        obj['bcolor'] = ApiClient.convertToType(data['bcolor'], 'String');
      }
      if (data.hasOwnProperty('direction')) {
        obj['direction'] = ApiClient.convertToType(data['direction'], 'Number');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('gid')) {
        obj['gid'] = ApiClient.convertToType(data['gid'], 'String');
      }
      if (data.hasOwnProperty('delay')) {
        obj['delay'] = ApiClient.convertToType(data['delay'], 'Number');
      }
      if (data.hasOwnProperty('y')) {
        obj['y'] = ApiClient.convertToType(data['y'], 'Number');
      }
      if (data.hasOwnProperty('x')) {
        obj['x'] = ApiClient.convertToType(data['x'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Line color of the journey
   * @member {String} lcolor
   */
  exports.prototype['lcolor'] = undefined;
  /**
   * Product class
   * @member {module:model/Vehicle.ProdClassEnum} prodClass
   */
  exports.prototype['prodClass'] = undefined;
  /**
   * Background color of the journey
   * @member {String} bcolor
   */
  exports.prototype['bcolor'] = undefined;
  /**
   * Direction of the vehicle. This is a value between 0 and 31 which is describing a direction vector
   * @member {Number} direction
   */
  exports.prototype['direction'] = undefined;
  /**
   * Journey name
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Service GID
   * @member {String} gid
   */
  exports.prototype['gid'] = undefined;
  /**
   * Current delay of the vehicle in minutes, can be negative, zero or positive
   * @member {Number} delay
   */
  exports.prototype['delay'] = undefined;
  /**
   * Y coordinate (latitude) of the position in WGS84 * 1000000
   * @member {Number} y
   */
  exports.prototype['y'] = undefined;
  /**
   * X coordinate (longitude) of the position in WGS84 * 1000000
   * @member {Number} x
   */
  exports.prototype['x'] = undefined;


  /**
   * Allowed values for the <code>prodClass</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ProdClassEnum = {
    /**
     * value: "VAS"
     * @const
     */
    "VAS": "VAS",
    /**
     * value: "LDT"
     * @const
     */
    "LDT": "LDT",
    /**
     * value: "REG"
     * @const
     */
    "REG": "REG",
    /**
     * value: "BUS"
     * @const
     */
    "BUS": "BUS",
    /**
     * value: "BOAT"
     * @const
     */
    "BOAT": "BOAT",
    /**
     * value: "TRAM"
     * @const
     */
    "TRAM": "TRAM",
    /**
     * value: "TAXI"
     * @const
     */
    "TAXI": "TAXI"  };


  return exports;
}));


